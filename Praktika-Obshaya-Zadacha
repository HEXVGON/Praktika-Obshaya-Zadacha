#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <regex>
#include <xhash>
#include <algorithm>

using namespace std;
int spisok(vector <string>& n, int& k) {
	cout << "Список: \n";
	for (int i = 0; i < k; i++)
		cout << n[i] << endl;
	cout << "0. Назад \n";
	int a;
	cin >> a;
	while (a != 0) {
		cout << "Неверное значение \n";
		cin >> a;
	}
	return 0;
}

int sohr(vector <string>& n, int& k) {
	ofstream f("C:/Users/Пользователь/Desktop/praktika/spisok.txt");
    for (int i = 0; i < k; i++)
        f << n[i] << endl;
	cout << "Сохранение успешно \n";
	return 0;
}

int dobav(vector <string>& t, int& k) {
    cout << "Введите данные пользователя: \n";
    string f, i, o, n, e, l, p;

    regex fam("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
    while (!regex_match(f.c_str(), fam)) {
        cout << "Фамилия: \n";
        cin >> f;
    }
    regex im("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
    while (!regex_match(i.c_str(), im)) {
        cout << "Имя: \n";
        cin >> i;
    }
    regex ot("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
    while (!regex_match(o.c_str(), ot)) {
        cout << "Отчество: \n";
        cin >> o;
    }
    regex num("([\+]7|8|7)""([\-]?)""([\(][0-9]{3}[\)]|[0-9]{3})""([\-]?)""([0-9]{3})""([\-]?)""([0-9]{2})""([\-]?)""([0-9]{2})");
    while (!regex_match(n.c_str(), num)) {
        cout << "Номер: \n";
        cin >> n;
    }
    string number = n;
    n = "+7-(";
    if (number[0] == '8') {
        int kol1 = 0, kol2 = 0, kol3 = 0;
        for (int j = 1; number[j] != NULL; j++) {
            if (kol3 == 2) {
                n += "-";
                kol3 = 0;
            }
            if (((number[j] >= '0') && (number[j] <= '9')) && kol1 != 3) {
                n += number[j];
                kol1++;
                if (kol1 == 3) n += ")-";
            }
            else {
                if (((number[j] >= '0') && (number[j] <= '9')) && kol2 != 3) {
                    n += number[j];
                    kol2++;
                    if (kol2 == 3) {
                        n += "-";
                    }
                }
                else {
                    if (((number[j] >= '0') && (number[j] <= '9')) && kol3 != 2) {
                        n += number[j];
                        kol3++;
                    }
                }
            }
        }
    }
    else {
        int kol1 = 0, kol2 = 0, kol3 = 0;
        for (int j = 2; number[j] != NULL; j++) {
            if (kol3 == 2) {
                n += "-";
                kol3 = 0;
            }
            if (((number[j] >= '0') && (number[j] <='9')) && kol1 != 3) {
                n += number[j];
                kol1++;
                if (kol1 == 3) n += ")-";
            }
            else {
                if (((number[j] >= '0') && (number[j] <= '9')) && kol2 != 3) {
                    n += number[j];
                    kol2++;
                    if (kol2 == 3) {
                        n += "-";
                    }
                }
                else {
                    if (((number[j] >= '0') && (number[j] <= '9')) && kol3 != 2) {
                        n += number[j];
                        kol3++;
                    }
                }
            }
        }
    }

    regex email("([\\w-]+)""(@)""([\\w-]+)""(\.)""([a-z]{2,5})");
    while (!regex_match(e.c_str(), email)) {
        cout << "е-mail: \n";
        cin >> e;
    }
    cout << "Логин: \n";
    cin >> l;
    regex pass1("^.{8,}$");
    regex pass2("^.*[A-Z]+.*$");
    regex pass3("^.*[a-z]+.*$");
    regex pass4("^.*[0-9]+.*$");
    regex pass5("^.*[\.\$\^\{\[\(\|\)\*\\+\?\\\@%\\&:;\=!#'\"\/\\{\\}\\[\\]<>,\\-]+.*$");
    while (!(regex_match(p.c_str(), pass1) && regex_match(p.c_str(), pass2) && regex_match(p.c_str(), pass3) && regex_match(p.c_str(), pass4) && regex_match(p.c_str(), pass5))) {
        cout << "Пароль(8< символов, 1 цифра, 1 заглавная и 1 Спец.знак): \n";
        cin >> p;
    }
    hash <string> pa;
    unsigned long int par;
    par = pa(p);
    p = to_string(par);
    string full;
    full = f + " " + i + " " + o + " " + n + " " + e + " " + l + " " + p;
    t.push_back(full);
    k++;
    return 0;
}
int udal(vector <string>& t, int& k) {
    cout << "1. По фамилии - имени \n";
    cout << "2. По логину \n";
    cout << "3. По номеру телефона \n";
    cout << "0. Назад \n";
    regex fam("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
    regex num("([\+]7|8|7)""([\-]?)""([\(][0-9]{3}[\)]|[0-9]{3})""([\-]?)""([0-9]{3})""([\-]?)""([0-9]{2})""([\-]?)""([0-9]{2})");
    string number;
    int kol1 = 0, kol2 = 0, kol3 = 0;
    string f, i, o, n, e, l, p, st,z,fa;
    int cc=0, schet=0;
    
    int a;
    cin >> a;
    switch (a) {
    case 1:
  
        while (!regex_match(f.c_str(), fam)) {
            cout << "Фамилия: \n";
            cin >> f;
        }
        fa = ' ' + f;
            for (int i = 0; i < k; i++) {
                z = ' ';
                st = t[i];
                for (int j = 0; st[j] != ' '; j++)
                {
                    z += st[j];
                    
                }
                if (z == fa) {
                    cc++;
                    k--;
                }
                if (cc>0 && i!=k) {
                    t[i] = t[i + 1];
                   
                }
            }
         
        
        
        break;
    case 2:
        cout << "Логин: \n";
        cin >> f;
    
      
        fa = ' ' + f;
        for (int i = 0; i < k; i++) {
            schet = 0;
            z = ' ';
            st = t[i];
            for (int j = 0; schet !=6; j++)
            {
              
                if (st[j] == ' ') {
                    schet++;
                    j++;
                }
                if (schet==5)
                    z += st[j];
            }
            if (z == fa) {
                cc++;
                k--;
            }
            if (cc > 0 && i != k) {
                t[i] = t[i + 1];

            }
        }

        break;
    case 3:
        while (!regex_match(f.c_str(), num)) {
            cout << "Номер: \n";
            cin >> f;
        }

       
        number = f;
        fa = " +7-(";
        if (number[0] == '8') {

            for (int j = 1; number[j] != NULL; j++) {
                if (kol3 == 2) {
                    fa += "-";
                    kol3 = 0;
                }
                if (((number[j] >= '0') && (number[j] <= '9')) && kol1 != 3) {
                    fa += number[j];
                    kol1++;
                    if (kol1 == 3) fa += ")-";
                }
                else {
                    if (((number[j] >= '0') && (number[j] <= '9')) && kol2 != 3) {
                        fa += number[j];
                        kol2++;
                        if (kol2 == 3) {
                            fa += "-";
                        }
                    }
                    else {
                        if (((number[j] >= '0') && (number[j] <= '9')) && kol3 != 2) {
                            fa += number[j];
                            kol3++;
                        }
                    }
                }
            }
        }
        else {
         
            for (int j = 2; number[j] != NULL; j++) {
                if (kol3 == 2) {
                    fa += "-";
                    kol3 = 0;
                }
                if (((number[j] >= '0') && (number[j] <= '9')) && kol1 != 3) {
                    fa += number[j];
                    kol1++;
                    if (kol1 == 3) fa += ")-";
                }
                else {
                    if (((number[j] >= '0') && (number[j] <= '9')) && kol2 != 3) {
                        fa += number[j];
                        kol2++;
                        if (kol2 == 3) {
                            fa += "-";
                        }
                    }
                    else {
                        if (((number[j] >= '0') && (number[j] <= '9')) && kol3 != 2) {
                            fa += number[j];
                            kol3++;
                        }
                    }
                }
            }
        }
        
        for (int i = 0; i < k; i++) {
            schet = 0;
            z = ' ';
            st = t[i];
            for (int j = 0; schet != 4; j++)
            {

                if (st[j] == ' ') {
                    schet++;
                    j++;
                }
                if (schet == 3)
                    z += st[j];
            }
            if (z == fa) {
                cc++;
                k--;
            
            }
            if (cc > 0 && i != k) {
                t[i] = t[i + 1];

            }
        }
        break;
    case 0:
        return 0;
        break;
    default:
        cout << "Недопустимое значение \n";
        return udal(t,k);
    }
}
int izmen(vector <string>& r, int& k) {
    cout << "Изменение: \n";
    cout << "1. По фамилии. \n";
    cout << "2. По логину. \n";
    cout << "3. Номеру телефона. \n";
    cout << "0. Назад. \n";
    int a;
    cin >> a;
    string fa, kr, jr, c2;
    int kollich = 0;
    int kollcase2 = 0, kc2 = 0, kcc2 = 0;
    int kollun = 0;
    regex fami("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
    regex numbe("([\+]7|8|7)""([\-]?)""([\(][0-9]{3}[\)]|[0-9]{3})""([\-]?)""([0-9]{3})""([\-]?)""([0-9]{2})""([\-]?)""([0-9]{2})");
    string numbur;
    switch (a) {
    case 1:
        while (!regex_match(fa.c_str(), fami)) {
            cout << "Введите фамилию: \n";
            cin >> fa;
        }
        for (int j = 0; fa[j] != NULL; j++) {
            kollich++;
        }
        for (int j = 0; j < k; j++) {
            jr = r[j];
            kr = ' ';
            kr[0] = jr[0];
            for (int q = 1; jr[q] != ' '; q++) {
                kr += jr[q];
            }
            if (fa == kr) {
                cout << "Введите данные пользователя: \n";
                string f, i, o, n, e, l, p;
                char g[20];
                regex fam("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
                while (!regex_match(f.c_str(), fam)) {
                    cout << "Фамилия: \n";
                    cin >> f;
                }
                regex im("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
                while (!regex_match(i.c_str(), im)) {
                    cout << "Имя: \n";
                    cin >> i;
                }
                regex ot("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
                while (!regex_match(o.c_str(), ot)) {
                    cout << "Отчество: \n";
                    cin >> o;
                }
                regex num("([\+]7|8|7)""([\-]?)""([\(][0-9]{3}[\)]|[0-9]{3})""([\-]?)""([0-9]{3})""([\-]?)""([0-9]{2})""([\-]?)""([0-9]{2})");
                while (!regex_match(n.c_str(), num)) {
                    cout << "Номер: \n";
                    cin >> n;
                }
                string numb = n;
                n = "+7-(";
                if (numb[0] == '8') {
                    int kol = 0, koll = 0, kolli = 0;
                    for (int j = 1; numb[j] != NULL; j++) {
                        if (kolli == 2) {
                            n += "-";
                            kolli = 0;
                        }
                        if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && kol != 3) {
                            n += numb[j];
                            kol++;
                            if (kol == 3) n += ")-";
                        }
                        else {
                            if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && koll != 3) {
                                n += numb[j];
                                koll++;
                                if (koll == 3) {
                                    n += "-";
                                }
                            }
                            else {
                                if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && kolli != 2) {
                                    n += numb[j];
                                    kolli++;
                                }
                            }
                        }
                    }
                }
                else {
                    int kol = 0, koll = 0, kolli = 0;
                    for (int j = 2; numb[j] != NULL; j++) {
                        if (kolli == 2) {
                            n += "-";
                            kolli = 0;
                        }
                        if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && kol != 3) {
                            n += numb[j];
                            kol++;
                            if (kol == 3) n += ")-";
                        }
                        else {
                            if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && koll != 3) {
                                n += numb[j];
                                koll++;
                                if (koll == 3) {
                                    n += "-";
                                }
                            }
                            else {
                                if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && kolli != 2) {
                                    n += numb[j];
                                    kolli++;
                                }
                            }
                        }
                    }
                }

                regex email("([\\w-]+)""(@)""([\\w-]+)""(\.)""([a-z]{2,5})");
                while (!regex_match(e.c_str(), email)) {
                    cout << "е-mail: \n";
                    cin >> e;
                }
                cout << "Логин: \n";
                cin >> l;
                regex pass1("^.{8,}$");
                regex pass2("^.*[A-Z]+.*$");
                regex pass3("^.*[a-z]+.*$");
                regex pass4("^.*[0-9]+.*$");
                regex pass5("^.*[\.\$\^\{\[\(\|\)\*\\+\?\\\@%\\&:;\=!#'\"\/\\{\\}\\[\\]<>,\\-]+.*$");
                while (!(regex_match(p.c_str(), pass1) && regex_match(p.c_str(), pass2) && regex_match(p.c_str(), pass3) && regex_match(p.c_str(), pass4) && regex_match(p.c_str(), pass5))) {
                    cout << "Пароль(8< символов, 1 цифра, 1 заглавная и 1 Спец.знак): \n";
                    cin >> p;
                }
                hash <string> pa;
                unsigned long int par;
                par = pa(p);
                p = to_string(par);
                string obsh;
                obsh = f + " " + i + " " + o + " " + n + " " + e + " " + l + " " + p;
                r[j] = obsh;
                cout << "Изменение успешно!\n";
            }
        }
        break;
    case 2:
        cout << "Введите логин: \n";
        cin >> fa;
        for (int j = 0; fa[j] != NULL; j++) {
            kollich++;
        }
        for (int j = 0; j < k; j++) {
            jr = r[j];
            for (int po = 0; kcc2 != 6; po++) {
                if (jr[po] == ' ') {
                    po++;
                    kcc2++;
                }
                if (kcc2 == 5) {
                    kr[po] = jr[po];
                }
            }
            if (fa == kr) {
                cout << "Введите данные пользователя: \n";
                string f, i, o, n, e, l, p;
                char g[20];
                regex fam("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
                while (!regex_match(f.c_str(), fam)) {
                    cout << "Фамилия: \n";
                    cin >> f;
                }
                regex im("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
                while (!regex_match(i.c_str(), im)) {
                    cout << "Имя: \n";
                    cin >> i;
                }
                regex ot("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
                while (!regex_match(o.c_str(), ot)) {
                    cout << "Отчество: \n";
                    cin >> o;
                }
                regex num("([\+]7|8|7)""([\-]?)""([\(][0-9]{3}[\)]|[0-9]{3})""([\-]?)""([0-9]{3})""([\-]?)""([0-9]{2})""([\-]?)""([0-9]{2})");
                while (!regex_match(n.c_str(), num)) {
                    cout << "Номер: \n";
                    cin >> n;
                }
                string numb = n;
                n = "+7-(";
                if (numb[0] == '8') {
                    int kol = 0, koll = 0, kolli = 0;
                    for (int j = 1; numb[j] != NULL; j++) {
                        if (kolli == 2) {
                            n += "-";
                            kolli = 0;
                        }
                        if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && kol != 3) {
                            n += numb[j];
                            kol++;
                            if (kol == 3) n += ")-";
                        }
                        else {
                            if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && koll != 3) {
                                n += numb[j];
                                koll++;
                                if (koll == 3) {
                                    n += "-";
                                }
                            }
                            else {
                                if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && kolli != 2) {
                                    n += numb[j];
                                    kolli++;
                                }
                            }
                        }
                    }
                }
                else {
                    int kol = 0, koll = 0, kolli = 0;
                    for (int j = 2; numb[j] != NULL; j++) {
                        if (kolli == 2) {
                            n += "-";
                            kolli = 0;
                        }
                        if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && kol != 3) {
                            n += numb[j];
                            kol++;
                            if (kol == 3) n += ")-";
                        }
                        else {
                            if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && koll != 3) {
                                n += numb[j];
                                koll++;
                                if (koll == 3) {
                                    n += "-";
                                }
                            }
                            else {
                                if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && kolli != 2) {
                                    n += numb[j];
                                    kolli++;
                                }
                            }
                        }
                    }
                }

                regex email("([\\w-]+)""(@)""([\\w-]+)""(\.)""([a-z]{2,5})");
                while (!regex_match(e.c_str(), email)) {
                    cout << "е-mail: \n";
                    cin >> e;
                }
                cout << "Логин: \n";
                cin >> l;
                regex pass1("^.{8,}$");
                regex pass2("^.*[A-Z]+.*$");
                regex pass3("^.*[a-z]+.*$");
                regex pass4("^.*[0-9]+.*$");
                regex pass5("^.*[\.\$\^\{\[\(\|\)\*\\+\?\\\@%\\&:;\=!#'\"\/\\{\\}\\[\\]<>,\\-]+.*$");
                while (!(regex_match(p.c_str(), pass1) && regex_match(p.c_str(), pass2) && regex_match(p.c_str(), pass3) && regex_match(p.c_str(), pass4) && regex_match(p.c_str(), pass5))) {
                    cout << "Пароль(8< символов, 1 цифра, 1 заглавная и 1 Спец.знак): \n";
                    cin >> p;
                }
                hash <string> pa;
                unsigned long int par;
                par = pa(p);
                p = to_string(par);
                string obsh;
                obsh = f + " " + i + " " + o + " " + n + " " + e + " " + l + " " + p;
                r[j] = obsh;
                cout << "Изменение успешно!\n";
                kr = ' ';
            }
        }
        break;
    case 3:
        while (!regex_match(fa.c_str(), numbe)) {
            cout << "Введите телефон: \n";
            cin >> fa;
        }
        numbur = fa;
        fa = "+7-(";
        if (numbur[0] == '8') {
            int kol = 0, koll = 0, kolli = 0;
            for (int j = 1; numbur[j] != NULL; j++) {
                if (kolli == 2) {
                    fa += "-";
                    kolli = 0;
                }
                if ((numbur[j] == '0' || numbur[j] == '1' || numbur[j] == '2' || numbur[j] == '3' || numbur[j] == '4' || numbur[j] == '5' || numbur[j] == '6' || numbur[j] == '7' || numbur[j] == '8' || numbur[j] == '9') && kol != 3) {
                    fa += numbur[j];
                    kol++;
                    if (kol == 3) fa += ")-";
                }
                else {
                    if ((numbur[j] == '0' || numbur[j] == '1' || numbur[j] == '2' || numbur[j] == '3' || numbur[j] == '4' || numbur[j] == '5' || numbur[j] == '6' || numbur[j] == '7' || numbur[j] == '8' || numbur[j] == '9') && koll != 3) {
                        fa += numbur[j];
                        koll++;
                        if (koll == 3) {
                            fa += "-";
                        }
                    }
                    else {
                        if ((numbur[j] == '0' || numbur[j] == '1' || numbur[j] == '2' || numbur[j] == '3' || numbur[j] == '4' || numbur[j] == '5' || numbur[j] == '6' || numbur[j] == '7' || numbur[j] == '8' || numbur[j] == '9') && kolli != 2) {
                            fa += numbur[j];
                            kolli++;
                        }
                    }
                }
            }
        }
        else {
            int kol = 0, koll = 0, kolli = 0;
            for (int j = 2; numbur[j] != NULL; j++) {
                if (kolli == 2) {
                    fa += "-";
                    kolli = 0;
                }
                if ((numbur[j] == '0' || numbur[j] == '1' || numbur[j] == '2' || numbur[j] == '3' || numbur[j] == '4' || numbur[j] == '5' || numbur[j] == '6' || numbur[j] == '7' || numbur[j] == '8' || numbur[j] == '9') && kol != 3) {
                    fa += numbur[j];
                    kol++;
                    if (kol == 3) fa += ")-";
                }
                else {
                    if ((numbur[j] == '0' || numbur[j] == '1' || numbur[j] == '2' || numbur[j] == '3' || numbur[j] == '4' || numbur[j] == '5' || numbur[j] == '6' || numbur[j] == '7' || numbur[j] == '8' || numbur[j] == '9') && koll != 3) {
                        fa += numbur[j];
                        koll++;
                        if (koll == 3) {
                            fa += "-";
                        }
                    }
                    else {
                        if ((numbur[j] == '0' || numbur[j] == '1' || numbur[j] == '2' || numbur[j] == '3' || numbur[j] == '4' || numbur[j] == '5' || numbur[j] == '6' || numbur[j] == '7' || numbur[j] == '8' || numbur[j] == '9') && kolli != 2) {
                            fa += numbur[j];
                            kolli++;
                        }
                    }
                }
            }
        }
        for (int j = 0; fa[j] != NULL; j++) {
            kollich++;
        }
        for (int j = 0; j < k; j++) {
            jr = r[j];
            for (int po = 0; kcc2 != 4; po++) {
                if (jr[po] == ' ') {
                    po++;
                    kcc2++;
                }
                if (kcc2 == 3) {
                    kr[po] = jr[po];
                }
            }
            if (fa == kr) {
                cout << "Введите данные пользователя: \n";
                string f, i, o, n, e, l, p;
                char g[20];
                regex fam("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
                while (!regex_match(f.c_str(), fam)) {
                    cout << "Фамилия: \n";
                    cin >> f;
                }
                regex im("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
                while (!regex_match(i.c_str(), im)) {
                    cout << "Имя: \n";
                    cin >> i;
                }
                regex ot("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
                while (!regex_match(o.c_str(), ot)) {
                    cout << "Отчество: \n";
                    cin >> o;
                }
                regex num("([\+]7|8|7)""([\-]?)""([\(][0-9]{3}[\)]|[0-9]{3})""([\-]?)""([0-9]{3})""([\-]?)""([0-9]{2})""([\-]?)""([0-9]{2})");
                while (!regex_match(n.c_str(), num)) {
                    cout << "Номер: \n";
                    cin >> n;
                }
                string numb = n;
                n = "+7-(";
                if (numb[0] == '8') {
                    int kol = 0, koll = 0, kolli = 0;
                    for (int j = 1; numb[j] != NULL; j++) {
                        if (kolli == 2) {
                            n += "-";
                            kolli = 0;
                        }
                        if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && kol != 3) {
                            n += numb[j];
                            kol++;
                            if (kol == 3) n += ")-";
                        }
                        else {
                            if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && koll != 3) {
                                n += numb[j];
                                koll++;
                                if (koll == 3) {
                                    n += "-";
                                }
                            }
                            else {
                                if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && kolli != 2) {
                                    n += numb[j];
                                    kolli++;
                                }
                            }
                        }
                    }
                }
                else {
                    int kol = 0, koll = 0, kolli = 0;
                    for (int j = 2; numb[j] != NULL; j++) {
                        if (kolli == 2) {
                            n += "-";
                            kolli = 0;
                        }
                        if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && kol != 3) {
                            n += numb[j];
                            kol++;
                            if (kol == 3) n += ")-";
                        }
                        else {
                            if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && koll != 3) {
                                n += numb[j];
                                koll++;
                                if (koll == 3) {
                                    n += "-";
                                }
                            }
                            else {
                                if ((numb[j] == '0' || numb[j] == '1' || numb[j] == '2' || numb[j] == '3' || numb[j] == '4' || numb[j] == '5' || numb[j] == '6' || numb[j] == '7' || numb[j] == '8' || numb[j] == '9') && kolli != 2) {
                                    n += numb[j];
                                    kolli++;
                                }
                            }
                        }
                    }
                }

                regex email("([\\w-]+)""(@)""([\\w-]+)""(\.)""([a-z]{2,5})");
                while (!regex_match(e.c_str(), email)) {
                    cout << "е-mail: \n";
                    cin >> e;
                }
                cout << "Логин: \n";
                cin >> l;
                regex pass1("^.{8,}$");
                regex pass2("^.*[A-Z]+.*$");
                regex pass3("^.*[a-z]+.*$");
                regex pass4("^.*[0-9]+.*$");
                regex pass5("^.*[\.\$\^\{\[\(\|\)\*\\+\?\\\@%\\&:;\=!#'\"\/\\{\\}\\[\\]<>,\\-]+.*$");
                while (!(regex_match(p.c_str(), pass1) && regex_match(p.c_str(), pass2) && regex_match(p.c_str(), pass3) && regex_match(p.c_str(), pass4) && regex_match(p.c_str(), pass5))) {
                    cout << "Пароль(8< символов, 1 цифра, 1 заглавная и 1 Спец.знак): \n";
                    cin >> p;
                }
                hash <string> pa;
                unsigned long int par;
                par = pa(p);
                p = to_string(par);
                string obsh;
                obsh = f + " " + i + " " + o + " " + n + " " + e + " " + l + " " + p;
                r[j] = obsh;
                cout << "Изменение успешно!\n";
                kr = ' ';
            }
        }
        break;
    case 0:
        return 0;
        break;
    default:
        cout << "Введите подходящее значение! \n";
        izmen(r, k);
        break;
    }
}
int sortirov(vector <string>& r, int& k) {
    cout << "Сортировка: \n";
    cout << "1. По фамилии-имени. \n";
    cout << "2. По логину. \n";
    cout << "3. Номеру телефона. \n";
    cout << "0. Назад. \n";
    int a;
    cin >> a;
    string fa, kr, jr, c2;
    int kollich = 0, kc1 = 0;
    int kollcase2 = 0, kc2 = 0, kcc2 = 0;
    int kollun = 0;
    regex fami("([A-Z])""([a-z]+)""([\-]?)""([A-Z]?)""([a-z]*)");
    regex numbe("([\+]7|8|7)""([\-]?)""([\(][0-9]{3}[\)]|[0-9]{3})""([\-]?)""([0-9]{3})""([\-]?)""([0-9]{2})""([\-]?)""([0-9]{2})");
    string numbur;
    vector <string> sortirovka(k);
    switch (a) {
    case 1:
        for (int j = 0; j < k; j++) {
            kr = ' ';
            jr = r[j];
            for (int q = 0; jr[q] != ' '; q++) {
                kr += jr[q];
            }
            sortirovka[j] = kr;
        }

        sort(sortirovka.begin(), sortirovka.end());
        for (int j = 0; j < k; j++) {
            kr = ' ';
            jr = r[j];
            for (int q = 0; jr[q] != ' '; q++) {
                kr += jr[q];
            }
            for (int q = 0; q < k; q++) {
                if (kr == sortirovka[q]) sortirovka[q] = r[j];
            }
        }
        for (int q = 0; q < k; q++) {
            r[q] = sortirovka[q];
        }
        cout << "Сортировка успешно!\n";
        break;
    case 2:
        for (int j = 0; j < k; j++) {
            kcc2 = 0;
            kr = ' ';
            jr = r[j];
            for (int po = 0; kcc2 != 6; po++) {
                if (jr[po] == ' ') kcc2++;
                if (kcc2 == 5) kr += jr[po];
            }
            sortirovka[j] = kr;
        }

        sort(sortirovka.begin(), sortirovka.end());
        for (int j = 0; j < k; j++) {
            kcc2 = 0;
            kr = ' ';
            jr = r[j];
            for (int po = 0; kcc2 != 6; po++) {
                if (jr[po] == ' ') kcc2++;
                if (kcc2 == 5) kr += jr[po];
            }
            for (int q = 0; q < k; q++) {
                if (kr == sortirovka[q]) sortirovka[q] = r[j];
            }
        }
        for (int q = 0; q < k; q++) {
            r[q] = sortirovka[q];
        }
        cout << "Сортировка успешно!\n";
        break;
    case 3:
        for (int j = 0; j < k; j++) {
            kcc2 = 0;
            kr = ' ';
            jr = r[j];
            for (int po = 0; kcc2 != 4; po++) {
                if (jr[po] == ' ') kcc2++;
                if (kcc2 == 3) kr += jr[po];
            }
            sortirovka[j] = kr;
        }

        sort(sortirovka.begin(), sortirovka.end());
        for (int j = 0; j < k; j++) {
            kcc2 = 0;
            kr = ' ';
            jr = r[j];
            for (int po = 0; kcc2 != 4; po++) {
                if (jr[po] == ' ') kcc2++;
                if (kcc2 == 3) kr += jr[po];
            }
            for (int q = 0; q < k; q++) {
                if (kr == sortirovka[q]) sortirovka[q] = r[j];
            }
        }
        for (int q = 0; q < k; q++) {
            r[q] = sortirovka[q];
        }
        cout << "Сортировка успешно!\n";
        break;
    case 0:
        return 0;
        break;
    default:
        cout << "Введите подходящее значение! \n";
        sortirov(r, k);
        break;
    }

}
int menu(vector <string>& n, int& k) {
	cout << "    Меню \n";
	cout << "1. Посмотреть список пользователей \n";
	cout << "2. Добавить пользователя \n";
	cout << "3. Удалить пользователя \n";
	cout << "4. Изменить пользователя \n";
	cout << "5. Сохранить пользователя \n";
	cout << "6. Отсортировать по выбранному полю \n";
	cout << "0. Выход \n";
	int a;
	cin >> a;
	switch (a) {
	case 1:
		spisok(n, k);
		break;
	case 2:
		dobav(n, k);
		break;
    case 3:
		udal(n,k);
		break;
    case 4:
		izmen(n, k);
		break;
	case 5:
		sohr(n,k);
		break;
    case 6:
		sortirov(n, k);
		break;
	case 0:
		return 1;
		break;
	default:
		cout << "Недопустимое значение \n";
		return 0;

	}
}


int main()
{

	setlocale(LC_ALL, "ru");
	ifstream f("C:/Users/Пользователь/Desktop/praktika/spisok.txt");
	vector <string> h;
	int count = 0;
	string s;
	while (f.peek() != EOF) {
		getline(f, s);
		count++;
	}
	f.close();
	ifstream f2("C:/Users/Пользователь/Desktop/praktika/spisok.txt");
	for (int i = 0; i < count; i++) {
		h.push_back(" ");
		getline(f2, h[i]);
	}

	int flag = 0;
	while (flag != 1) {
		flag = menu(h, count);
	}
	system("pause");
	return 0;
}
